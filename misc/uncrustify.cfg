#
# uncrustify config file for the linux kernel
#

indent_with_tabs	= 0		# 1=indent to level only, 2=indent with tabs
input_tab_size		= 2		# original tab size
output_tab_size		= 2		# new tab size
indent_columns		= output_tab_size

indent_label		= 1		# pos: absolute col, neg: relative column

indent_col1_comment = true    # false/true
indent_switch_case              = indent_columns        # number
# Whether to put a newline after 'case' statement
nl_after_case                   = true    # false/true

# Add or remove newline between return type and function name in a function definition
nl_func_type_name               = force   # ignore/add/remove/force
nl_func_proto_type_name         = force

# The number of newlines after '}' of a multi-line function body
nl_after_func_body              = 3        # number

# The number of newlines after a function prototype, if followed by another function prototype
nl_after_func_proto             = 3        # number

# Whether to fully split long function protos/calls at commas
ls_func_split_full              = true    # false/true

# Whether to put a newline after brace open.
# This also adds a newline before the matching brace close.
nl_after_brace_open             = true    # false/true

# If nl_after_brace_open and nl_after_brace_open_cmt are true, a newline is
# placed between the open brace and a trailing single-line comment.
nl_after_brace_open_cmt         = true    # false/true

# Whether to put an empty '/*' on the first line of the combined c-comment
cmt_c_nl_start                  = true    # false/true

# Whether to put a newline before the closing '*/' of the combined c-comment
cmt_c_nl_end                    = true    # false/true

# Align variable definitions in prototypes and functions
align_func_params               = true    # false/true

# The span for aligning variable definitions (0=don't align)
align_var_def_span              = 5        # number

# How to align the star in variable definitions.
#  0=Part of the type     'void *   foo;'
#  1=Part of the variable 'void     *foo;'
#  2=Dangling             'void    *foo;'
align_var_def_star_style        = 1        # number

# The number of blank lines after a block of variable definitions at the top of a function body
# 0 = No change (default)
nl_func_var_def_blk             = 1        # number

# Try to limit code width to N number of columns
code_width                      = 100        # number

#
# Blank line options
#

# The maximum consecutive newlines (3 = 2 blank lines)
nl_max  = 3        # number

#
# inter-symbol newlines
#

nl_enum_brace		= remove	# "enum {" vs "enum \n {"
nl_union_brace		= remove	# "union {" vs "union \n {"
nl_struct_brace		= remove	# "struct {" vs "struct \n {"
nl_do_brace 		= remove	# "do {" vs "do \n {"
nl_if_brace 		= remove	# "if () {" vs "if () \n {"
nl_for_brace 		= remove	# "for () {" vs "for () \n {"
nl_else_brace 		= remove	# "else {" vs "else \n {"
nl_while_brace 		= remove	# "while () {" vs "while () \n {"
nl_switch_brace 	= remove	# "switch () {" vs "switch () \n {"
nl_brace_while		= remove	# "} while" vs "} \n while" - cuddle while
nl_brace_else		= remove	# "} else" vs "} \n else" - cuddle else
sp_brace_else		= force
sp_else_brace		= force
nl_func_var_def_blk	= 1
nl_fcall_brace		= remove	# "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace		= add		# "int foo() {" vs "int foo()\n{"
nl_after_label_colon	= true		# "fail:\nfree(foo);" vs "fail: free(foo);"
# nl_after_return		= TRUE;
# nl_before_case	= 1


#
# Source code modifications
#

mod_paren_on_return	= remove	# "return 1;" vs "return (1);"
#mod_full_brace_if	= remove	# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_if_chain	= true
mod_full_brace_for	= remove	# "for () a--;" vs "for () { a--; }"
mod_full_brace_do	= remove	# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while	= remove	# "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_nl	= 3		# don't remove if more than 3 newlines


#
# inter-character spacing options
#

sp_return_paren		= force		# "return (1);" vs "return(1);"
sp_sizeof_paren		= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen	= force		# "if (" vs "if("
sp_after_sparen		= force		# "if () {" vs "if (){"
sp_after_cast		= remove	# "(int) a" vs "(int)a"
sp_inside_braces	= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct	= force	# "{ 1 }" vs "{1}"
sp_inside_braces_enum	= force	# "{ 1 }" vs "{1}"
sp_assign		= force
sp_arith		= force
sp_bool			= force
sp_compare		= force
sp_assign		= force
sp_after_comma		= force
sp_func_def_paren	= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren	= remove	# "foo (" vs "foo("
sp_func_proto_paren	= remove	# "int foo ();" vs "int foo();"


#
# Aligning stuff
#

align_with_tabs		= FALSE		# use tabs to align
align_on_tabstop	= TRUE 		# align on tabstops
# align_keep_tabs		= true
align_enum_equ_span	= 4		# '=' in enum definition
# align_nl_cont		= TRUE
# align_var_def_span	= 2
# align_var_def_inline	= TRUE
# align_var_def_star	= FALSE
# align_var_def_colon	= TRUE
align_assign_span	= 1
align_struct_init_span	= 3		# align stuff in a structure init '= { }'
align_right_cmt_span	= 3
# align_pp_define_span	= 8;
# align_pp_define_gap	= 4;

cmt_star_cont = true
cmt_c_group   = true

# indent_brace		= 0

nl_func_paren = remove
nl_func_decl_start = remove
nl_func_decl_empty = remove
nl_func_decl_args = remove
nl_func_decl_end = remove
sp_inside_paren = remove
sp_inside_square = remove
sp_inside_paren_cast = remove
sp_inside_fparen = remove
sp_inside_sparen = remove
sp_paren_paren = remove
sp_before_ptr_star = force
sp_after_ptr_star = remove
sp_between_ptr_star = remove
align_func_params = true
align_var_struct_span = 6

eat_blanks_after_open_brace   = true
eat_blanks_before_close_brace = true
pp_indent = remove

nl_start_of_file   = remove
nl_end_of_file     = force
nl_end_of_file_min = 1
nl_comment_func_def = 1

# Whether to put a newline after semicolons, except in 'for' statements
nl_after_semicolon  = true    # false/true

# Whether to put a newline after a virtual brace open with a non-empty body.
# These occur in un-braced if/while/do/for statement bodies.
nl_after_vbrace_open  = true    # false/true

# Add or remove blank line after 'if' statement
nl_after_if           = force   # ignore/add/remove/force

#
# enforce function definitions/declarations with more than
# one parameter to look like this:
#
# function_name(parameter_1,
#               parameter_2,
#               parameter_n)
#
nl_func_decl_start                       = remove
nl_func_def_start                        = remove
nl_func_decl_start_single                = remove
nl_func_def_start_single                 = remove
nl_func_decl_args                        = add
nl_func_def_args                         = add
nl_func_decl_end                         = remove
nl_func_def_end                          = remove
nl_func_decl_end_single                  = remove
nl_func_def_end_single                   = remove
